import streamlit as st
import pandas as pd
import plotly.express as px
import requests
from io import BytesIO
import datetime
from Levenshtein import distance
from pandasai import SmartDataframe
from pandasai.llm import GoogleGemini
from pandasai.responses.response_parser import ResponseParser

# Dictionnaire pour stocker les dataframes extraits
data = {}

def main():
    st.set_page_config(page_title="Exploration avec IA", page_icon="ü§ñ")
    st.title("Discutez avec vos donn√©es gr√¢ce √† Google GenAI ü§ñ")

    # T√©l√©chargement de fichier CSV ou Excel
    st.subheader("T√©l√©chargez un fichier CSV ou Excel")
    file_upload = st.file_uploader("T√©l√©chargez votre fichier", type=['csv', 'xls', 'xlsx'])
    
    if file_upload:
        try:
            # Extraire les donn√©es
            data = extraire_dataframes(file_upload)
            df_name = st.selectbox("S√©lectionnez un tableau de donn√©es √† partir de votre fichier :", options=list(data.keys()))
            df = data[df_name]
            st.dataframe(df)

            # Affichage d'un graphique
            colonne = st.selectbox("S√©lectionnez une colonne pour visualiser les donn√©es", df.columns)
            fig = px.histogram(df, x=colonne, title=f"Distribution de {colonne}")
            st.plotly_chart(fig)

            # Int√©gration de l'IA pour analyser les donn√©es
            question = st.text_input("Posez une question √† propos de vos donn√©es")
            if question:
                llm = obtenir_llm()  # R√©cup√©rer l'API Google
                if llm:
                    sdf = SmartDataframe(df, llm=llm)
                    reponse = analyser_donnees(sdf, question)
                    if reponse:
                        st.write(reponse)

        except Exception as e:
            st.error(f"Erreur lors du chargement du fichier : {e}")

# Fonction pour extraire les dataframes √† partir du fichier t√©l√©charg√©
def extraire_dataframes(fichier):
    dfs = {}
    extension = fichier.name.split('.')[-1]

    if extension == 'csv':
        nom_df = fichier.name.split('.')[0]
        dfs[nom_df] = pd.read_csv(fichier)
    elif extension in ['xls', 'xlsx']:
        xls = pd.ExcelFile(fichier)
        for feuille in xls.sheet_names:
            dfs[feuille] = pd.read_excel(fichier, sheet_name=feuille)
    return dfs

# Fonction pour configurer Google GenAI avec les secrets Streamlit
def obtenir_llm():
    try:
        api_key = st.secrets["GOOGLE_API_KEY"]
        return GoogleGemini(api_key=api_key)
    except KeyError:
        st.error("Cl√© API manquante dans les secrets.")
        return None

# Fonction pour analyser les donn√©es avec SmartDataframe
def analyser_donnees(sdf, question):
    try:
        response = sdf.chat(question, response_parser=ResponseParser())
        return response
    except Exception as e:
        st.error(f"Erreur lors de l'analyse : {e}")
        return None

if __name__ == "__main__":
    main()
